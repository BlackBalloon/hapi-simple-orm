// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var BaseDAO, Promise, _, knex, knexConf,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  knexConf = require(process.cwd() + '/knexfile');

  knex = require('knex')(knexConf[process.env.NODE_ENV]);

  _ = require('underscore');

  Promise = require('bluebird');

  BaseDAO = (function() {
    function BaseDAO(model, errorLogger) {
      var returningArray;
      if (this.config == null) {
        this.config = {};
      }
      this.config.model = model;
      this.config.errorLogger = errorLogger;
      if (this.config.lookupField == null) {
        this.config.lookupField = this.config.model.metadata.primaryKey;
      }
      if (this.config.returning == null) {
        this.config.returning = {};
        this.config.returning['basic'] = ['*'];
      }
      if (_.contains(this.config.returning.basic, '*')) {
        returningArray = _.map(this.config.model.prototype.attributes, (function(_this) {
          return function(val, key) {
            if (!(key in _this.config.model.prototype.timestampAttributes) && (val.attributes.abstract == null)) {
              return (val.getDbField(key)) + " AS " + key;
            }
          };
        })(this));
        this.config.returning.basic = _.without(returningArray, void 0);
      }
    }

    BaseDAO.prototype.getById = function(arg) {
      var ref, returning, toObject, val;
      ref = arg != null ? arg : {}, val = ref.val, returning = ref.returning, toObject = ref.toObject;
      if (toObject == null) {
        toObject = true;
      }
      if (val == null) {
        throw new Error("'getById' method requires value for 'val' attribute!");
      }
      if (returning == null) {
        returning = this.config.returning.basic;
      }
      return knex(this.config.model.metadata.tableName).where(this.config.model.metadata.primaryKey, val).andWhere('is_deleted', false).select(returning).then((function(_this) {
        return function(rows) {
          if (rows.length > 1) {
            throw new Error("'getById()' method on '" + _this.config.model.metadata.model + "' returned more than 1 row!");
          }
          if (toObject && rows.length === 1) {
            return new _this.config.model(rows[0]);
          }
          return rows[0];
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          if (_this.config.errorLogger != null) {
            _this.config.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    BaseDAO.prototype.get = function(arg) {
      var lookup, ref, returning, toObject;
      ref = arg != null ? arg : {}, lookup = ref.lookup, returning = ref.returning, toObject = ref.toObject;
      if (toObject == null) {
        toObject = true;
      }
      if (lookup == null) {
        throw new Error("Lookup object is required!");
      }
      if (returning == null) {
        returning = this.config.returning.basic;
      }
      return knex(this.config.model.metadata.tableName).where(lookup).andWhere('is_deleted', false).select(returning).then((function(_this) {
        return function(rows) {
          if (rows.length > 1) {
            throw new Error("'get()' method on '" + _this.config.model.metadata.tableName + "' returned more than 1 row!");
          }
          if (toObject && rows.length === 1) {
            return new _this.config.model(rows[0]);
          }
          return rows[0];
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          if (_this.config.errorLogger != null) {
            _this.config.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    BaseDAO.prototype.all = function(arg) {
      var column, knexQuery, orderBy, ref, returning, toObject;
      ref = arg != null ? arg : {}, returning = ref.returning, toObject = ref.toObject, orderBy = ref.orderBy;
      if (toObject == null) {
        toObject = true;
      }
      if ((orderBy != null) && typeof orderBy === 'string' && orderBy in this.config.model.prototype.attributes) {
        column = this.config.model.prototype.attributes[orderBy].attributes.dbField;
        orderBy = {
          column: column,
          direction: 'asc'
        };
      } else if ((orderBy != null) && _.isObject(orderBy) && indexOf.call(_.keys(orderBy), 'column') >= 0 && orderBy.column in this.config.model.prototype.attributes) {
        orderBy.column = this.config.model.prototype.attributes[orderBy].attributes.dbField;
        if (orderBy.direction == null) {
          orderBy.direction = 'asc';
        }
      } else if (orderBy != null) {
        throw new Error("'orderBy' should be an object with 'column' and 'direction' attributes " + ("or name of the field of " + this.config.model.metadata.model + "!"));
      }
      if (returning == null) {
        returning = this.config.returning.basic;
      }
      knexQuery = knex(this.config.model.metadata.tableName).select(returning).where('is_deleted', false);
      if (orderBy != null) {
        knexQuery.orderBy(orderBy.column, orderBy.direction);
      }
      return knexQuery.then((function(_this) {
        return function(rows) {
          if (toObject && rows.length > 0) {
            return _.map(rows, function(val, key) {
              return new _this.config.model(val);
            });
          }
          return rows;
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          if (_this.config.errorLogger != null) {
            _this.config.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    BaseDAO.prototype.filter = function(arg) {
      var column, lookup, orderBy, query, ref, returning, toObject;
      ref = arg != null ? arg : {}, lookup = ref.lookup, returning = ref.returning, toObject = ref.toObject, orderBy = ref.orderBy;
      if (toObject == null) {
        toObject = true;
      }
      if (returning == null) {
        returning = this.config.returning.basic;
      }
      if (lookup == null) {
        lookup = [
          {
            key: 'where',
            values: {}
          }
        ];
      }
      if ((orderBy != null) && typeof orderBy === 'string' && orderBy in this.config.model.prototype.attributes) {
        column = this.config.model.prototype.attributes[orderBy].attributes.dbField;
        orderBy = {
          column: column,
          direction: 'asc'
        };
      } else if ((orderBy != null) && _.isObject(orderBy && indexOf.call(_.keys(orderBy && orderBy.column in this.config.model.prototype.attributes), 'column') >= 0)) {
        orderBy.column = this.config.model.prototype.attributes[orderBy].attributes.dbField;
        if (orderBy.direction == null) {
          orderBy.direction = 'asc';
        }
      } else if (orderBy != null) {
        throw new Error("'orderBy' should be an object with 'column' and 'direction' attributes " + ("or name of the field of " + this.config.model.metadata.model + "!"));
      }
      query = knex(this.config.model.metadata.tableName).select(returning);
      _.each(lookup, function(val) {
        if (typeof val.values[0] === 'object' && !(_.isEmpty(val.values[0]))) {
          return query[val.key](function() {
            return _.each(val.values, (function(_this) {
              return function(nestedVal) {
                if (nestedVal.values.length === 2) {
                  return _this[nestedVal.key](nestedVal.values[0], nestedVal.values[1]);
                } else {
                  return _this[nestedVal.key](nestedVal.values[0], nestedVal.values[1], nestedVal.values[2]);
                }
              };
            })(this));
          });
        } else if (val.values instanceof Array) {
          if (val.values.length === 2) {
            return query[val.key](val.values[0], val.values[1]);
          } else if (val.values.length === 3) {
            return query[val.key](val.values[0], val.values[1], val.values[2]);
          }
        }
      });
      query.andWhere('is_deleted', false);
      console.log(query.toString());
      if (orderBy != null) {
        query.orderBy(orderBy.column, orderBy.direction);
      }
      return query.then((function(_this) {
        return function(rows) {
          if (toObject && rows.length > 0) {
            return _.map(rows, function(val, key) {
              return new _this.config.model(val);
            });
          }
          return rows;
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          if (_this.config.errorLogger != null) {
            _this.config.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    BaseDAO.prototype.create = function(arg) {
      var direct, instance, payload, ref, returning, toObject, validationPromise;
      ref = arg != null ? arg : {}, payload = ref.payload, returning = ref.returning, toObject = ref.toObject, direct = ref.direct;
      if (toObject == null) {
        toObject = true;
      }
      if (returning == null) {
        returning = this.config.returning.basic;
      }
      validationPromise = null;
      if (direct != null) {
        instance = new this.config.model(payload);
        validationPromise = instance.validate();
        payload = instance._toDatabaseFields();
      }
      return Promise.all([validationPromise]).then((function(_this) {
        return function(validationErrors) {
          if (!(_.isEmpty(validationErrors[0]))) {
            throw validationErrors[0];
          }
          return knex(_this.config.model.metadata.tableName).insert(payload, returning).then(function(rows) {
            if ((toObject != null) && rows.length === 1) {
              return new _this.config.model(rows[0]);
            }
            return rows[0];
          })["catch"](function(error) {
            if (_this.config.errorLogger != null) {
              _this.config.errorLogger.error(error);
            }
            throw error;
          });
        };
      })(this));
    };

    BaseDAO.prototype.bulkCreate = function(arg) {
      var data, firstObject, insertedReturning, model, ref, returning, tableName, toObject;
      ref = arg != null ? arg : {}, data = ref.data, returning = ref.returning, toObject = ref.toObject;
      if ((data == null) || !(data instanceof Array)) {
        throw new Error("'data' argument must be passed to the function and it must be an array!");
      }
      if (toObject == null) {
        toObject = true;
      }
      if (returning == null) {
        returning = this.config.returning.basic;
      }
      firstObject = new this.config.model(_.first(data));
      data.shift();
      model = this.config.model;
      tableName = this.config.model.metadata.tableName;
      insertedReturning = [];
      return knex.transaction(function(trx) {
        return firstObject.validate({
          trx: trx
        }).then(function(firstObjectValidation) {
          if (!(_.isEmpty(firstObjectValidation))) {
            throw firstObjectValidation;
          }
          return knex.insert(firstObject._toDatabaseFields(), returning).into(tableName).transacting(trx).then(function(result) {
            if (result.length === 1) {
              insertedReturning.push(_.first(result));
            } else {
              throw new Error("Error during 'bulkCreate' on " + model.metadata.model + "!");
            }
            return Promise.each(data, function(singleData) {
              var currentObject;
              currentObject = new model(singleData);
              return currentObject.validate({
                trx: trx
              }).then(function(currentObjectValidation) {
                if (!(_.isEmpty(currentObjectValidation))) {
                  throw currentObjectValidation;
                }
                return knex.insert(currentObject._toDatabaseFields(), returning).into(tableName).transacting(trx).then(function(result) {
                  if (result.length === 1) {
                    return insertedReturning.push(_.first(result));
                  } else {
                    throw new Error("Error during 'bulkCreate' on " + model.metadata.model + "!");
                  }
                });
              });
            });
          }).then(trx.commit)["catch"](trx.rollback);
        });
      }).then(function(inserts) {
        return insertedReturning;
      })["catch"]((function(_this) {
        return function(error) {
          if (_this.config.errorLogger != null) {
            _this.config.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    BaseDAO.prototype.update = function(arg) {
      var lookup, obj, ref, returning, toObject;
      ref = arg != null ? arg : {}, obj = ref.obj, returning = ref.returning, toObject = ref.toObject;
      if (toObject == null) {
        toObject = true;
      }
      if (obj == null) {
        throw new Error("'update()' method needs model instance as 'obj' parameter!");
      }
      if (returning == null) {
        returning = this.config.returning.basic;
      }
      lookup = {};
      lookup[this.config.lookupField] = obj.get(this.config.lookupField);
      return knex(this.config.model.metadata.tableName).where(lookup).andWhere('is_deleted', false).update(obj._toDatabaseFields(), returning).then((function(_this) {
        return function(rows) {
          if ((toObject != null) && rows.length === 1) {
            return new _this.config.model(rows[0]);
          }
          return rows[0];
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          if (_this.config.errorLogger != null) {
            _this.config.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    BaseDAO.prototype["delete"] = function(lookupValue, whoDeleted) {
      var deleteData, lookup;
      deleteData = {
        is_deleted: true
      };
      _.extend(deleteData, {
        'deleted_at': new Date()
      });
      if ((whoDeleted != null) && this.config.model.metadata.timestamps) {
        _.extend(deleteData, {
          'who_deleted_id': whoDeleted
        });
      }
      lookup = {};
      lookup[this.config.lookupField] = lookupValue;
      return knex(this.config.model.metadata.tableName).where(lookup).andWhere('is_deleted', false).update(deleteData).then(function(rows) {
        return rows;
      })["catch"]((function(_this) {
        return function(error) {
          if (_this.config.errorLogger != null) {
            _this.config.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    BaseDAO.prototype.getReturning = function() {
      return this.config.returning;
    };

    return BaseDAO;

  })();

  module.exports = BaseDAO;

}).call(this);
