// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var ManyToOne, _, knex, knexConf,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  knexConf = require(process.cwd() + '/knexfile');

  knex = require('knex')(knexConf[process.env.NODE_ENV]);

  ManyToOne = (function() {
    var ManyToOneManager;

    function ManyToOne() {
      var attributes;
      attributes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.attributes = attributes;
      this.acceptedParameters = ['schema', 'toModel', 'referenceField', 'returning', 'abstract'];
      this.attributes = _.reduce(this.attributes, function(memo, value) {
        return value;
      });
      this.attributes['abstract'] = true;
      _.each(this.attributes, (function(_this) {
        return function(val, key) {
          if (indexOf.call(_this.acceptedParameters, key) < 0) {
            throw new TypeError("Key '" + key + "' is not accepted in field " + _this.attributes.name + "!");
          }
        };
      })(this));
    }

    ManyToOneManager = (function() {
      function ManyToOneManager(obj, name, field) {
        this.obj = obj;
        this.name = name;
        this.all = bind(this.all, this);
        this.toModel = require(field.attributes.toModel);
        this.referenceField = field.attributes.referenceField;
        this.returning = _.map(field.attributes.returning, (function(_this) {
          return function(val) {
            if (val in _this.toModel.prototype.attributes) {
              return (_this.toModel.prototype.attributes[val].getDbField(val)) + " AS " + val;
            }
          };
        })(this));
      }

      ManyToOneManager.prototype.all = function(arg) {
        var toObject;
        toObject = (arg != null ? arg : {}).toObject;
        return knex(this.toModel.metadata.tableName).select(this.returning).where(this.referenceField, this.obj[this.obj.constructor.metadata.primaryKey]).andWhere(this.toModel.metadata.tableName + ".is_deleted", false).then((function(_this) {
          return function(result) {
            var relatedObjects;
            if (toObject != null) {
              relatedObjects = [];
              _.each(result, function(val) {
                return relatedObjects.push(new _this.toModel(val));
              });
              return relatedObjects;
            }
            return result;
          };
        })(this))["catch"]((function(_this) {
          return function(error) {
            if (_this.obj.constructor.metadata.errorLogger != null) {
              _this.obj.constructor.metadata.errorLogger.error(error);
            }
            throw error;
          };
        })(this));
      };

      ManyToOneManager.prototype.get = function(arg) {
        var ref, toObject, where;
        ref = arg != null ? arg : {}, where = ref.where, toObject = ref.toObject;
        return knex(this.toModel.metadata.tableName).select(this.returning).where(where).andWhere(this.toModel.metadata.tableName + ".is_deleted", false).then((function(_this) {
          return function(result) {
            var errorObj;
            if (result.length > 1) {
              errorObj = {};
              errorObj[_this.name] = "Query returned more than 1 result";
              errorObj['statusCode'] = 400;
              throw errorObj;
            }
            if ((toObject != null) && result.length === 1) {
              return new _this.toModel(result[0]);
            }
            return result[0];
          };
        })(this))["catch"]((function(_this) {
          return function(error) {
            if ((_this.obj.constructor.metadata.errorLogger != null) && (error.statusCode == null)) {
              _this.obj.constructor.metadata.errorLogger.error(error);
            }
            throw error;
          };
        })(this));
      };

      return ManyToOneManager;

    })();

    ManyToOne.getManyToOneManager = function() {
      return ManyToOneManager;
    };

    return ManyToOne;

  })();

  module.exports = ManyToOne;

}).call(this);
