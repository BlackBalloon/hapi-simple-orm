// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Joi, ManyToMany, _, knex, knexConf,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  knexConf = require(process.cwd() + '/knexfile');

  knex = require('knex')(knexConf[process.env.NODE_ENV]);

  Joi = require('joi');

  ManyToMany = (function() {
    var ManyToManyManager;

    ManyToMany.acceptedParameters = ['schema', 'toModel', 'through', 'throughFields', 'returning', 'name', 'abstract'];

    function ManyToMany() {
      var attributes;
      attributes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.attributes = attributes;
      this.attributes = _.reduce(this.attributes, function(memo, value) {
        return value;
      });
      if (!_.has(this.attributes, 'schema')) {
        _.extend(this.attributes, {
          schema: Joi.array(Joi.number().integer().positive())
        });
      }
      this.attributes['abstract'] = true;
      _.each(this.attributes, (function(_this) {
        return function(val, key) {
          if (indexOf.call(_this.constructor.acceptedParameters, key) < 0) {
            throw new TypeError("Key '" + key + "' is not accepted in field " + _this.attributes.name + "!");
          }
        };
      })(this));
    }

    ManyToManyManager = (function() {
      function ManyToManyManager(obj1, name, field) {
        this.obj = obj1;
        this.name = name;
        this.set = bind(this.set, this);
        this.add = bind(this.add, this);
        this.get = bind(this.get, this);
        this.all = bind(this.all, this);
        this.toModel = require(field.attributes.toModel);
        this.thisModel = this.obj.constructor.metadata.tableName;
        this.through = field.attributes.through;
        this.throughFields = field.attributes.throughFields;
        this.returning = _.map(field.attributes.returning, (function(_this) {
          return function(val) {
            return _this.toModel.metadata.tableName + "." + (_this.obj.attributes[val].getDbField(val)) + " AS " + val;
          };
        })(this));
      }

      ManyToManyManager.prototype.all = function(arg) {
        var toObject;
        toObject = (arg != null ? arg : {}).toObject;
        return knex(this.toModel.metadata.tableName).select(this.returning).leftJoin(this.through, this.toModel.metadata.tableName + ".id", this.through + "." + this.throughFields[1]).leftJoin(this.thisModel, this.thisModel + ".id", this.through + "." + this.throughFields[0]).where(this.thisModel + ".id", this.obj[this.obj.constructor.metadata.primaryKey]).andWhere(this.toModel.metadata.tableName + ".is_deleted", false).then((function(_this) {
          return function(result) {
            var relatedObjects;
            if (toObject != null) {
              relatedObjects = [];
              _.each(result, function(val) {
                return relatedObjects.push(new _this.toModel(val));
              });
              return relatedObjects;
            }
            return result;
          };
        })(this))["catch"]((function(_this) {
          return function(error) {
            if (_this.obj.constructor.metadata.errorLogger != null) {
              _this.obj.constructor.metadata.errorLogger.error(error);
            }
            throw error;
          };
        })(this));
      };

      ManyToManyManager.prototype.get = function(arg) {
        var id, ref, toObject;
        ref = arg != null ? arg : {}, id = ref.id, toObject = ref.toObject;
        return knex(this.toModel.metadata.tableName).select(this.returning).where("" + this.toModel.metadata.primaryKey, id).andWhere('is_deleted', false).then((function(_this) {
          return function(result) {
            if ((toObject != null) && result.length === 1) {
              return new _this.toModel(result[0]);
            }
            return result[0];
          };
        })(this))["catch"]((function(_this) {
          return function(error) {
            if (_this.obj.constructor.metadata.errorLogger != null) {
              _this.obj.constructor.metadata.errorLogger.error(error);
            }
            throw error;
          };
        })(this));
      };

      ManyToManyManager.prototype.add = function() {
        var id;
        id = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (id == null) {
          throw new Error("IDs of related objects are required");
        }
        id = _.flatten(id);
        if (this.obj[this.obj.constructor.metadata.primaryKey] == null) {
          throw new Error("First you need to save the instance in order to assign related objects to it!");
        }
        return knex.transaction((function(_this) {
          return function(transaction) {
            return knex(_this.toModel.metadata.tableName).count('id').whereIn('id', id).andWhere('is_deleted', false).transacting(transaction).then(function(result) {
              var errorObj;
              if (parseInt(result[0].count) !== id.length) {
                errorObj = {};
                errorObj[_this.name] = "Specified related object does not exist!";
                errorObj['statusCode'] = 404;
                throw errorObj;
              } else {
                return knex(_this.through).select(_this.throughFields[1]).where(_this.throughFields[0], _this.obj[_this.obj.constructor.metadata.primaryKey]).transacting(transaction).then(function(result) {
                  var insertValues;
                  insertValues = [];
                  _.each(id, function(val) {
                    var obj;
                    if (indexOf.call(_.pluck(result, _this.throughFields[1]), val) < 0) {
                      obj = {};
                      obj[_this.throughFields[0]] = _this.obj[_this.obj.constructor.metadata.primaryKey];
                      obj[_this.throughFields[1]] = val;
                      return insertValues.push(obj);
                    }
                  });
                  if (insertValues.length > 0) {
                    return knex(_this.through).insert(insertValues, _this.throughFields[1]).transacting(transaction);
                  } else {
                    return [];
                  }
                });
              }
            }).then(transaction.commit)["catch"](transaction.rollback);
          };
        })(this)).then(function(rows) {
          return rows;
        })["catch"]((function(_this) {
          return function(error) {
            if ((_this.obj.constructor.metadata.errorLogger != null) && (error.statusCode == null)) {
              _this.obj.constructor.metadata.errorLogger.error(error);
            }
            throw error;
          };
        })(this));
      };

      ManyToManyManager.prototype.set = function() {
        var id, insertValues;
        id = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (id == null) {
          throw new Error("IDs of related objects are required!");
        }
        if (this.obj[this.obj.constructor.metadata.primaryKey] == null) {
          throw new Error("First you need to save the instance in order to assign related objects to it!");
        }
        id = _.flatten(id);
        insertValues = _.map(id, (function(_this) {
          return function(val) {
            var obj;
            obj = {};
            obj[_this.throughFields[0]] = _this.obj[_this.obj.constructor.metadata.primaryKey];
            obj[_this.throughFields[1]] = val;
            return obj;
          };
        })(this));
        return knex.transaction((function(_this) {
          return function(transaction) {
            return knex(_this.toModel.metadata.tableName).count('id').whereIn('id', id).andWhere('is_deleted', false).then(function(result) {
              var errorObj;
              if (parseInt(result[0].count) !== id.length) {
                errorObj = {};
                errorObj[_this.name] = "Specified related object does not exist!";
                errorObj['statusCode'] = 404;
                throw errorObj;
              } else {
                return knex(_this.through).where(_this.throughFields[0], _this.obj[_this.obj.constructor.metadata.primaryKey]).del().transacting(transaction).then(function(result) {
                  return knex(_this.through).insert(insertValues, _this.throughFields[1]).transacting(transaction);
                });
              }
            }).then(transaction.commit)["catch"](transaction.rollback);
          };
        })(this)).then(function(rows) {
          return rows;
        })["catch"]((function(_this) {
          return function(error) {
            if ((_this.obj.constructor.metadata.errorLogger != null) && (error.statusCode == null)) {
              _this.obj.constructor.metadata.errorLogger.error(error);
            }
            throw error;
          };
        })(this));
      };

      return ManyToManyManager;

    })();

    ManyToMany.getManyToManyManager = function() {
      return ManyToManyManager;
    };

    return ManyToMany;

  })();

  module.exports = ManyToMany;

}).call(this);
