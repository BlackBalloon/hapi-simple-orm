// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var BaseView, _, acceptableMethods,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  acceptableMethods = ['get', 'put', 'patch', 'post', 'delete'];

  BaseView = (function() {
    BaseView._decoratorMethodBody = function(self, method, args, key, value) {
      var obj;
      obj = {};
      obj[key] = value;
      if (_.isEmpty(args)) {
        return method.apply(self, [obj]);
      } else {
        args['0'] = _.extend(args['0'], obj);
        return method.apply(self, args);
      }
    };

    BaseView.method = function(methodName) {
      return function(method) {
        return function() {
          var ref;
          if (methodName == null) {
            throw new Error("It is necessary to specify 'methodName' attribute for the view!");
          }
          if ((methodName != null) && !(ref = methodName.toLowerCase(), indexOf.call(acceptableMethods, ref) >= 0)) {
            throw new Error("Method name for route should be one of " + acceptableMethods + "!");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'method', methodName);
        };
      };
    };

    BaseView.path = function(path) {
      return function(method) {
        return function() {
          if (path == null) {
            throw new Error("It is necessary to specify 'path' attribute for the view!");
          }
          if (typeof path === "function" ? path(typeof path !== 'string') : void 0) {
            throw new Error("'path' of the route should be a string");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'path', path);
        };
      };
    };

    BaseView.id = function(id) {
      return function(method) {
        return function() {
          if ((id != null) && typeof id !== 'string') {
            throw new Error("'id' of the route should be a string");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'id', id);
        };
      };
    };

    BaseView.description = function(description) {
      return function(method) {
        return function() {
          if ((description != null) && typeof description !== 'string') {
            throw new Error("'description' of the route should be a string");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'description', description);
        };
      };
    };

    BaseView.many = function(many) {
      return function(method) {
        return function() {
          if (many == null) {
            many = false;
          }
          if ((many != null) && typeof many !== 'boolean') {
            throw new Error("'many' attribute should be boolean");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'many', many);
        };
      };
    };

    BaseView.params = function(params) {
      return function(method) {
        return function() {
          if (params == null) {
            params = {};
          }
          if ((params != null) && typeof params !== 'object') {
            throw new Error("'params' of the routing should be an object'");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'params', params);
        };
      };
    };

    BaseView.responses = function(responses) {
      return function(method) {
        return function() {
          return this.constructor._decoratorMethodBody(this, method, arguments, 'responses', responses);
        };
      };
    };

    BaseView.payload = function(payload) {
      return function(method) {
        return function() {
          if (payload == null) {
            payload = {};
          }
          if ((payload != null) && typeof payload !== 'object') {
            throw new Error("'payload' of the routing object should be an object");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'payload', payload);
        };
      };
    };

    function BaseView(server, options) {
      this.server = server;
      this.options = options;
    }

    BaseView.prototype._getBasicConfiguration = function(arg) {
      var description, id, many, method, params, path, payload, ref, responses;
      ref = arg != null ? arg : {}, method = ref.method, description = ref.description, id = ref.id, path = ref.path, many = ref.many, params = ref.params, responses = ref.responses, payload = ref.payload;
      return {
        method: method,
        path: path,
        config: {
          description: description,
          tags: this.config.tags,
          id: id,
          security: this.options.security,
          cors: true,
          validate: {
            headers: this.options.headersValidation,
            params: params,
            payload: payload
          },
          plugins: {
            'hapi-swagger': this.server.methods.swaggerRouteResponse(method, many, responses)
          }
        }
      };
    };

    return BaseView;

  })();

  module.exports = BaseView;

}).call(this);
