// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var BaseView, _, acceptableDefaultOptions, acceptableMethods, acceptableRouteOptions,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  acceptableMethods = ['get', 'put', 'patch', 'post', 'delete'];

  acceptableRouteOptions = ['app', 'auth', 'bind', 'cache', 'cors', 'ext', 'files', 'handler', 'id', 'isInternal', 'json', 'jsonp', 'payload', 'plugins', 'pre', 'response', 'security', 'state', 'validate', 'timeout', 'description', 'notes', 'tags'];

  acceptableDefaultOptions = ['app', 'auth', 'bind', 'cache', 'cors', 'files', 'json', 'jsonp', 'plugins', 'pre', 'security', 'state', 'validate', 'timeout', 'tags'];

  BaseView = (function() {
    BaseView._decoratorMethodBody = function(self, method, args, key, value) {
      var obj;
      obj = {};
      obj[key] = value;
      if (_.isEmpty(args)) {
        return method.apply(self, [obj]);
      } else {
        args['0'] = _.extend(args['0'], obj);
        return method.apply(self, args);
      }
    };

    BaseView.method = function(methodName) {
      return function(method) {
        return function() {
          var ref;
          if (methodName == null) {
            throw new Error("It is necessary to specify 'methodName' attribute for the view!");
          }
          if ((methodName != null) && !(ref = methodName.toLowerCase(), indexOf.call(acceptableMethods, ref) >= 0)) {
            throw new Error("Method name for route should be one of " + acceptableMethods + "!");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'method', methodName);
        };
      };
    };

    BaseView.path = function(path) {
      return function(method) {
        return function() {
          if (path == null) {
            throw new Error("It is necessary to specify 'path' attribute for the view!");
          }
          if (typeof path === "function" ? path(typeof path !== 'string') : void 0) {
            throw new Error("'path' of the route should be a string");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'path', path);
        };
      };
    };

    BaseView.id = function(id) {
      return function(method) {
        return function() {
          if ((id != null) && typeof id !== 'string') {
            throw new Error("'id' of the route should be a string");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'id', id);
        };
      };
    };

    BaseView.description = function(description) {
      return function(method) {
        return function() {
          if ((description != null) && typeof description !== 'string') {
            throw new Error("'description' of the route should be a string");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'description', description);
        };
      };
    };

    BaseView.many = function(many) {
      return function(method) {
        return function() {
          if (many == null) {
            many = false;
          }
          if ((many != null) && typeof many !== 'boolean') {
            throw new Error("'many' attribute should be boolean");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'many', many);
        };
      };
    };

    BaseView.params = function(params) {
      return function(method) {
        return function() {
          if (params == null) {
            params = {};
          }
          if ((params != null) && typeof params !== 'object') {
            throw new Error("'params' of the routing should be an object'");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'params', params);
        };
      };
    };

    BaseView.responses = function(responses) {
      return function(method) {
        return function() {
          return this.constructor._decoratorMethodBody(this, method, arguments, 'responses', responses);
        };
      };
    };

    BaseView.payload = function(payload) {
      return function(method) {
        return function() {
          if (payload == null) {
            payload = {};
          }
          if ((payload != null) && typeof payload !== 'object') {
            throw new Error("'payload' of the routing object should be an object");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'payload', payload);
        };
      };
    };

    BaseView.query = function(query) {
      return function(method) {
        return function() {
          if (query == null) {
            query = {};
          }
          if ((query != null) && typeof query !== 'object') {
            throw new Error("'query' parameters of routing object should be an object");
          }
          return this.constructor._decoratorMethodBody(this, method, arguments, 'query', query);
        };
      };
    };

    BaseView.getAcceptableRouteOptions = function() {
      return acceptableRouteOptions;
    };

    function BaseView(server, defaultOptions) {
      this.server = server;
      this.defaultOptions = defaultOptions;
      if (this.defaultOptions == null) {
        this.defaultOptions = {};
      }
    }

    BaseView.prototype._getFullConfiguration = function(options) {
      var routeObject;
      if (!(_.isObject(options))) {
        throw new Error("'options' of route should be an object");
      }
      if (!('method' in options) || !('path' in options) || !('config' in options)) {
        throw new Error("'method', 'path' and 'config' attributes are required for route options!");
      }
      routeObject = {};
      _.extend(routeObject, {
        method: options.method,
        path: options.path,
        config: {}
      });
      _.each(acceptableRouteOptions, function(val) {
        return routeObject.config[val] = options.config[val] || this.defaultOptions[val] || void 0;
      });
      if ((routeObject.config.handler == null) || !(typeof routeObject.config.handler === 'function')) {
        throw new Error("Route options must have 'config.handler()' method defined!");
      }
      return routeObject;
    };

    BaseView.prototype.getBasicConfiguration = function(arg) {
      var description, id, many, method, params, path, payload, ref, responses;
      ref = arg != null ? arg : {}, method = ref.method, description = ref.description, id = ref.id, path = ref.path, many = ref.many, params = ref.params, responses = ref.responses, payload = ref.payload;
      return {
        method: method,
        path: path,
        config: {
          description: description,
          tags: this.config.tags,
          id: id,
          security: this.defaultOptions.security,
          cors: true,
          validate: {
            headers: this.defaultOptions.validate.headers,
            params: params != null ? params : void 0,
            payload: payload != null ? payload : void 0
          },
          plugins: {
            'hapi-swagger': {
              responses: _.mapObject(responses, function(val, key) {
                if (val.constructor.name === 'String') {
                  return {
                    'description': val
                  };
                }
                return val;
              })
            }
          }
        }
      };
    };

    return BaseView;

  })();

  module.exports = BaseView;

}).call(this);
