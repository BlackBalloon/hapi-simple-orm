// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var BaseView, Boom, Joi, ModelView, _, optionsAllowedAttributes,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  Joi = require('joi');

  Boom = require('boom');

  BaseView = require('./baseView');

  optionsAllowedAttributes = ['security', 'headersValidation', 'validate'];

  ModelView = (function(superClass) {
    extend(ModelView, superClass);

    function ModelView(server, options) {
      var base, base1, base2, base3, base4, base5, primaryKey;
      this.server = server;
      this.options = options;
      this["delete"] = bind(this["delete"], this);
      this.update = bind(this.update, this);
      this.create = bind(this.create, this);
      this.get = bind(this.get, this);
      if (this.config.model == null) {
        throw new Error('You must specify \'config.model\' attribute of ModelView!');
      }
      if ((this.server == null) || (this.options == null)) {
        throw new Error('You need to pass \'server\' and \'options\' to ModelView constructor!');
      }
      if ((base = this.config).errorMessages == null) {
        base.errorMessages = {};
      }
      if ((base1 = this.config).pluralName == null) {
        base1.pluralName = this.config.model.metadata.model + "s";
      }
      if ((base2 = this.config).serializer == null) {
        base2.serializer = void 0;
      }
      this.config.assignValue = this.config.model.metadata.model.substr(0, 1).toLowerCase() + this.config.model.metadata.model.substr(1);
      _.each(this.options, function(val, key) {
        if (indexOf.call(optionsAllowedAttributes, key) < 0) {
          throw new Error("Attribute '" + key + "' is not accepted in 'options' parameter!");
        }
      });

      /*
      options obj:
      {
        security: {
          hsts: true
          xframe:
            rule: 'sameorigin'
          xss: true
          noOpen: true
          noSniff: true
        }
        headersValidation: Joi.object()
        validate: {
          failAction: (request, reply, source, error)
          options: {
            abortEarly: boolean
            stripUnknown: boolean
          }
        }
      }
       */
      if (this.options == null) {
        this.options = {};
      }
      if ((base3 = this.options).security == null) {
        base3.security = void 0;
      }
      if ((base4 = this.options).headersValidation == null) {
        base4.headersValidation = void 0;
      }
      if ((base5 = this.options).validate == null) {
        base5.validate = {};
      }
      this.paramsValidation = {};
      primaryKey = this.config.model.metadata.primaryKey;
      this.paramsValidation[primaryKey] = this.config.model.prototype.attributes[primaryKey].attributes.schema.required();
    }

    ModelView.prototype.get = function(ifSerialize, serializer) {
      return {
        method: 'GET',
        path: "/" + this.config.model.metadata.tableName + "/{" + this.config.model.metadata.primaryKey + "}",
        config: {
          description: "Return " + this.config.model.metadata.model + " with specified id",
          tags: this.config.tags,
          id: "return" + this.config.model.metadata.model,
          security: this.options.security,
          cors: true,
          validate: {
            headers: this.options.headersValidation,
            params: this.paramsValidation
          },
          plugins: {
            'hapi-swagger': this.server.methods.swaggerRouteResponse('get', false)
          },
          handler: (function(_this) {
            return function(request, reply) {
              return _this.config.model.objects().getById({
                val: request.params.id
              }).then(function(result) {
                var serializerClass, serializerInstance;
                if (result != null) {
                  if (ifSerialize) {
                    serializerClass = serializer ? serializer : _this.config.serializer;
                    if (serializerClass == null) {
                      throw new Error("There is no serializer specified for " + _this.constructor.name);
                    }
                    serializerInstance = new serializerClass({
                      data: result
                    });
                    return serializerInstance.getData().then(function(serializerData) {
                      return reply(serializerData);
                    });
                  } else {
                    return reply(result);
                  }
                } else {
                  return reply(Boom.notFound(_this.config.errorMessages['notFound'] || (_this.config.model.metadata.model + " does not exist")));
                }
              })["catch"](function(error) {
                return reply(Boom.badRequest(error));
              });
            };
          })(this)
        }
      };
    };

    ModelView.prototype.list = function(ifSerialize, serializer) {
      return {
        method: 'GET',
        path: "/" + this.config.model.metadata.tableName,
        config: {
          description: "Return all " + this.config.pluralName,
          tags: this.config.tags,
          id: "returnAll" + this.config.pluralName,
          security: this.options.security,
          cors: true,
          validate: {
            headers: this.options.headersValidation
          },
          plugins: {
            'hapi-swagger': this.server.methods.swaggerRouteResponse('get', true)
          },
          handler: (function(_this) {
            return function(request, reply) {
              return _this.config.model.objects().all().then(function(objects) {
                var serializerClass, serializerInstance;
                if (ifSerialize) {
                  serializerClass = serializer ? serializer : _this.config.serializer;
                  if (serializerClass == null) {
                    throw new Error("There is no serializer specified for " + _this.constructor.name);
                  }
                  serializerInstance = new serializerClass({
                    data: objects,
                    many: true
                  });
                  return serializerInstance.getData().then(function(serializerData) {
                    return reply(serializerData);
                  });
                } else {
                  return reply(objects);
                }
              })["catch"](function(error) {
                return reply(Boom.badRequest(error));
              });
            };
          })(this)
        }
      };
    };

    ModelView.prototype.create = function(ifSerialize, serializer) {
      return {
        method: 'POST',
        path: "/" + this.config.model.metadata.tableName,
        config: {
          description: "Create new " + this.config.model.metadata.model,
          tags: this.config.tags,
          id: "addNew" + this.config.model.metadata.model,
          security: this.options.security,
          cors: true,
          validate: {
            headers: this.options.headersValidation,
            payload: this.config.model.getSchema(),
            failAction: this.options.validate.failAction,
            options: this.options.validate.options
          },
          plugins: {
            'hapi-swagger': this.options.headersValidation
          },
          handler: (function(_this) {
            return function(request, reply) {
              if (request.auth.credentials != null) {
                _.extend(request.payload, {
                  whoCreated: request.auth.credentials.user.id
                });
              }
              return _this.config.model.objects().create({
                payload: request.payload,
                direct: true
              }).then(function(result) {
                var publishObj, serializerClass, serializerInstance;
                if (ifSerialize) {
                  serializerClass = serializer ? serializer : _this.config.serializer;
                  if (serializerClass == null) {
                    throw new Error("There is no serializer specified for " + _this.constructor.name);
                  }
                  serializerInstance = new serializerClass({
                    data: result
                  });
                  return serializerInstance.getData().then(function(serializerData) {
                    return reply(serializerData).code(201);
                  });
                } else {
                  publishObj = {
                    action: 'add',
                    obj: result
                  };
                  _this.server.publish("/" + _this.config.model.metadata.tableName, publishObj);
                  return reply(result).code(201);
                }
              })["catch"](function(error) {
                return reply(error).code(400);
              });
            };
          })(this)
        }
      };
    };

    ModelView.prototype.update = function(ifSerialize, serializer) {
      return {
        method: 'PUT',
        path: "/" + this.config.model.metadata.tableName + "/{" + this.config.model.metadata.primaryKey + "}",
        config: {
          description: "Update " + this.config.model.metadata.model + " with specified id",
          tags: this.config.tags,
          id: "update" + this.config.model.metadata.model,
          security: this.options.security,
          cors: true,
          validate: {
            headers: this.options.headersValidation,
            params: this.paramsValidation,
            payload: this.config.model.getSchema(),
            failAction: this.options.validate.failAction,
            options: this.options.validate.options
          },
          plugins: {
            'hapi-swagger': this.server.methods.swaggerRouteResponse('put')
          },
          pre: [
            {
              assign: this.config.assignValue,
              method: (function(_this) {
                return function(request, reply) {
                  return _this.config.model.objects().getById({
                    val: request.params.id
                  }).then(function(result) {
                    return reply(result);
                  });
                };
              })(this)
            }
          ],
          handler: (function(_this) {
            return function(request, reply) {
              if (request.pre[_this.config.assignValue] != null) {
                request.pre[_this.config.assignValue].set(request.payload);
                return request.pre[_this.config.assignValue].save().then(function(result) {
                  var serializerClass, serializerInstance;
                  if (ifSerialize) {
                    serializerClass = serializer ? serializer : _this.config.serializer;
                    if (serializerClass == null) {
                      throw new Error("There is no serializer specified for " + _this.constructor.name);
                    }
                    serializerInstance = new serializerClass({
                      data: result
                    });
                    return serializerInstance.getData().then(function(serializerData) {
                      return reply(serializerData);
                    });
                  } else {
                    return reply(result);
                  }
                })["catch"](function(error) {
                  return reply(error).code(400);
                });
              } else {
                return reply(Boom.notFound(_this.config.errorMessages.notFound || (_this.config.model.metadata.model + " does not exist")));
              }
            };
          })(this)
        }
      };
    };

    ModelView.prototype.partialUpdate = function(ifSerialize, serializer) {
      var obj;
      obj = this.update(ifSerialize, serializer);
      obj.config.validate.payload = this.config.model.getSchema(void 0, true);
      return obj;
    };

    ModelView.prototype["delete"] = function() {
      return {
        method: 'DELETE',
        path: "/" + this.config.model.metadata.tableName + "/{" + this.config.model.metadata.primaryKey + "}",
        config: {
          description: "Delete " + this.config.model.metadata.model + " with specified id",
          tags: this.config.tags,
          id: "delete" + this.config.model.metadata.model,
          security: this.options.security,
          cors: true,
          validate: {
            headers: this.options.headersValidation,
            params: this.paramsValidation
          },
          plugins: {
            'hapi-swagger': this.server.methods.swaggerRouteResponse('delete')
          },
          handler: (function(_this) {
            return function(request, reply) {
              var whoDeleted;
              whoDeleted = request.auth.credentials != null ? request.auth.credentials.user.id : void 0;
              return _this.config.model.objects()["delete"](request.params.id, whoDeleted).then(function(result) {
                var publishObj;
                if (result === 1) {
                  publishObj = {
                    action: 'delete',
                    id: request.params.id
                  };
                  _this.server.publish("/" + _this.config.model.metadata.tableName, publishObj);
                  return reply(result);
                }
                return reply(Boom.notFound(_this.config.errorMessages.notFound || (_this.config.model.metadata.model + " does not exist!")));
              })["catch"](function(error) {
                return reply(Boom.badRequest(error));
              });
            };
          })(this)
        }
      };
    };

    return ModelView;

  })(BaseView);

  module.exports = ModelView;

}).call(this);
