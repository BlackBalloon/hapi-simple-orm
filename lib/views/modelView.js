// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var BaseView, Boom, Joi, ModelView, _, moduleKeywords,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  Joi = require('joi');

  Boom = require('boom');

  BaseView = require('./baseView');

  moduleKeywords = ['extended', 'included'];

  ModelView = (function(superClass) {
    extend(ModelView, superClass);

    ModelView.applyConfiguration = function(obj) {
      var key, ref, value;
      this.prototype['config'] = {};
      for (key in obj) {
        value = obj[key];
        if (indexOf.call(moduleKeywords, key) < 0) {
          this.prototype['config'][key] = value;
        }
      }
      if ((ref = obj.included) != null) {
        ref.apply(this);
      }
      return this;
    };

    function ModelView(server, defaultOptions1) {
      var base, base1, base2;
      this.server = server;
      this.defaultOptions = defaultOptions1;
      this["delete"] = bind(this["delete"], this);
      this.partialUpdate = bind(this.partialUpdate, this);
      this.update = bind(this.update, this);
      this.create = bind(this.create, this);
      this.list = bind(this.list, this);
      this.get = bind(this.get, this);
      if ((this.config != null) && (this.config.model == null)) {
        throw new Error('You must specify \'config.model\' class attribute of ModelView!');
      }
      if (this.server == null) {
        throw new Error('You need to pass \'server\' instance to ModelView constructor!');
      }
      if ((base = this.config).errorMessages == null) {
        base.errorMessages = {};
      }
      if ((base1 = this.config).pluralName == null) {
        base1.pluralName = this.config.model.metadata.model + "s";
      }
      if ((base2 = this.config).serializer == null) {
        base2.serializer = void 0;
      }
      ModelView.__super__.constructor.apply(this, arguments);
    }

    ModelView.prototype.__extendProperties = function(defaultOptions, extraOptions) {
      _.each(extraOptions, (function(_this) {
        return function(val, key) {
          if ((val != null) && (val.constructor != null) && val.constructor.name === 'Object' && !(_.isEmpty(val))) {
            defaultOptions[key] = defaultOptions[key] || {};
            return _this.__extendProperties(defaultOptions[key], val);
          } else {
            return defaultOptions[key] = val;
          }
        };
      })(this));
      return defaultOptions;
    };

    ModelView.prototype._extendRouteObject = function(routeObject, options) {
      var defaultOptionsCopy, rejectedOptions;
      if ((options != null) && _.isObject(options)) {
        routeObject.method = options.method || routeObject.method;
        routeObject.path = options.path || routeObject.path;
      }
      if (options.config == null) {
        options.config = {};
      }
      if ((rejectedOptions = _.difference(_.keys(options.config), this.constructor.getAcceptableRouteOptions())).length > 0) {
        throw new Error("Options " + rejectedOptions + " are not accepted in route object!");
      }
      defaultOptionsCopy = this.__extendProperties({}, this.defaultOptions);
      this.__extendProperties(routeObject.config, this.__extendProperties(defaultOptionsCopy, _.clone(options.config)));
      if (!(typeof routeObject.config.handler === 'function')) {
        throw new Error("The 'config.handler' attribute of route should be a function.");
      }
      return routeObject;
    };

    ModelView.prototype.get = function(ifSerialize, serializer, options) {
      var obj1, routeObject;
      if ((options != null) && !(_.isObject(options))) {
        throw new Error("'options' parameter of routing method should be an object");
      }
      if (options == null) {
        options = {
          config: {}
        };
      }
      routeObject = {
        method: 'GET',
        path: "/" + this.config.model.metadata.tableName + "/{" + this.config.model.metadata.primaryKey + "}",
        config: {
          description: "Return " + this.config.model.metadata.model + " with specified id",
          tags: this.config.tags,
          id: "return" + this.config.model.metadata.model,
          validate: {
            params: (
              obj1 = {},
              obj1["" + this.config.model.metadata.primaryKey] = this.config.model.prototype.attributes[this.config.model.metadata.primaryKey].attributes.schema.required(),
              obj1
            ),
            query: {
              fields: Joi.array().items(Joi.string()).single()
            }
          },
          plugins: {
            'hapi-swagger': {
              responses: {
                '200': {
                  'description': 'Success',
                  'schema': Joi.object(this.config.model.getSchema()).label(this.config.model.metadata.model)
                },
                '400': {
                  'description': 'Bad request'
                },
                '401': {
                  'description': 'Unauthorized'
                },
                '404': {
                  'description': 'Not found'
                }
              }
            }
          },
          handler: (function(_this) {
            return function(request, reply) {
              var error, error1, returning;
              returning = void 0;
              if (request.query.fields != null) {
                try {
                  returning = _.map(request.query.fields, function(field) {
                    if (!(field in _this.config.model.prototype.attributes)) {
                      throw new Error("Field '" + field + "' does not match any attribute of model " + _this.config.model.metadata.model);
                    }
                    if (!_this.config.allowTimestampAttributes && field in _this.config.model.prototype.timestampAttributes) {
                      throw new Error("Field '" + field + "' does not match any attribute of model " + _this.config.model.metadata.model);
                    }
                    return (_this.config.model.prototype.attributes[field].getDbField(field)) + " AS " + field;
                  });
                } catch (error1) {
                  error = error1;
                  return reply(Boom.badRequest(error));
                }
              }
              return _this.config.model.objects().getById({
                pk: request.params.id,
                returning: returning
              }).then(function(result) {
                var serializerClass, serializerInstance;
                if (result != null) {
                  if (ifSerialize) {
                    serializerClass = serializer ? serializer : _this.config.serializer;
                    if (serializerClass == null) {
                      throw new Error("There is no serializer specified for " + _this.constructor.name);
                    }
                    serializerInstance = new serializerClass({
                      data: result
                    });
                    return serializerInstance.getData().then(function(serializerData) {
                      return reply(serializerData);
                    });
                  } else {
                    return reply(result);
                  }
                } else {
                  return reply(Boom.notFound(_this.config.errorMessages['notFound'] || (_this.config.model.metadata.model + " does not exist")));
                }
              })["catch"](function(error) {
                return reply(Boom.badRequest(error));
              });
            };
          })(this)
        }
      };
      if ((options != null) && _.isObject(options)) {
        this._extendRouteObject(routeObject, options);
      }
      return routeObject;
    };

    ModelView.prototype.list = function(ifSerialize, serializer, options) {
      var routeObject;
      if ((options != null) && !(_.isObject(options))) {
        throw new Error("'options' parameter of routing method should be an object");
      }
      if (options == null) {
        options = {
          config: {}
        };
      }
      routeObject = {
        method: 'GET',
        path: "/" + this.config.model.metadata.tableName,
        config: {
          description: "Return all " + this.config.pluralName,
          tags: this.config.tags,
          id: "returnAll" + this.config.pluralName,
          validate: {
            query: {
              fields: Joi.array().items(Joi.string()).single()
            }
          },
          plugins: {
            'hapi-swagger': {
              responses: {
                '200': {
                  'description': 'Success',
                  'schema': Joi.object({
                    items: Joi.array().items(this.config.model.getSchema())
                  }).label(this.config.pluralName)
                },
                '400': {
                  'description': 'Bad request'
                },
                '401': {
                  'description': 'Unauthorized'
                }
              }
            }
          },
          handler: (function(_this) {
            return function(request, reply) {
              var error, error1, returning;
              returning = void 0;
              if (request.query.fields != null) {
                try {
                  returning = _.map(request.query.fields, function(field) {
                    if (!(field in _this.config.model.prototype.attributes)) {
                      throw new Error("Field '" + field + "' does not match any attribute of model " + _this.config.model.metadata.model);
                    }
                    if (!_this.config.allowTimestampAttributes && field in _this.config.model.prototype.timestampAttributes) {
                      throw new Error("Field '" + field + "' does not match any attribute of model " + _this.config.model.metadata.model);
                    }
                    return (_this.config.model.prototype.attributes[field].getDbField(field)) + " AS " + field;
                  });
                } catch (error1) {
                  error = error1;
                  return reply(Boom.badRequest(error));
                }
              }
              return _this.config.model.objects().all({
                returning: returning
              }).then(function(objects) {
                var serializerClass, serializerInstance;
                if (ifSerialize) {
                  serializerClass = serializer ? serializer : _this.config.serializer;
                  if (serializerClass == null) {
                    throw new Error("There is no serializer specified for " + _this.constructor.name);
                  }
                  serializerInstance = new serializerClass({
                    data: objects,
                    many: true
                  });
                  return serializerInstance.getData().then(function(serializerData) {
                    return reply(serializerData);
                  });
                } else {
                  return reply(objects);
                }
              })["catch"](function(error) {
                return reply(Boom.badRequest(error));
              });
            };
          })(this)
        }
      };
      if ((options != null) && _.isObject(options)) {
        this._extendRouteObject(routeObject, options);
      }
      return routeObject;
    };

    ModelView.prototype.create = function(ifSerialize, serializer, options) {
      var routeObject;
      if ((options != null) && !(_.isObject(options))) {
        throw new Error("'options' parameter of routing method should be an object");
      }
      if (options == null) {
        options = {
          config: {}
        };
      }
      routeObject = {
        method: 'POST',
        path: "/" + this.config.model.metadata.tableName,
        config: {
          description: "Create new " + this.config.model.metadata.model,
          tags: this.config.tags,
          id: "addNew" + this.config.model.metadata.model,
          validate: {
            payload: this.config.model.getSchema()
          },
          plugins: {
            'hapi-swagger': {
              responses: {
                '201': {
                  'description': 'Created',
                  'schema': Joi.object(this.config.model.getSchema()).label(this.config.model.metadata.model)
                },
                '400': {
                  'description': 'Bad request/validation error'
                },
                '401': {
                  'description': 'Unauthorized'
                }
              }
            }
          },
          handler: (function(_this) {
            return function(request, reply) {
              if (request.auth.credentials != null) {
                _.extend(request.payload, {
                  whoCreated: request.auth.credentials.user.id
                });
              }
              return _this.config.model.objects().create({
                data: request.payload
              }).then(function(result) {
                var publishObj, serializerClass, serializerInstance;
                if (_this.config.createLogger != null) {
                  _this.config.createLogger.info(_this.config.model.metadata.model + " created: " + result);
                }
                if (ifSerialize) {
                  serializerClass = serializer ? serializer : _this.config.serializer;
                  if (serializerClass == null) {
                    throw new Error("There is no serializer specified for " + _this.constructor.name);
                  }
                  serializerInstance = new serializerClass({
                    data: result
                  });
                  return serializerInstance.getData().then(function(serializerData) {
                    return reply(serializerData).code(201);
                  });
                } else {
                  publishObj = {
                    action: 'add',
                    obj: result
                  };
                  _this.server.publish("/" + _this.config.model.metadata.tableName, publishObj);
                  return reply(result).code(201);
                }
              })["catch"](function(error) {
                return reply(Boom.badRequest(error));
              });
            };
          })(this)
        }
      };
      if ((options != null) && _.isObject(options)) {
        this._extendRouteObject(routeObject, options);
      }
      return routeObject;
    };

    ModelView.prototype.update = function(ifSerialize, serializer, options) {
      var obj1, routeObject;
      if ((options != null) && !(_.isObject(options))) {
        throw new Error("'options' parameter of routing method should be an object");
      }
      if (options == null) {
        options = {
          config: {}
        };
      }
      routeObject = {
        method: 'PUT',
        path: "/" + this.config.model.metadata.tableName + "/{" + this.config.model.metadata.primaryKey + "}",
        config: {
          description: "Update " + this.config.model.metadata.model + " with specified id",
          tags: this.config.tags,
          id: "update" + this.config.model.metadata.model,
          validate: {
            params: (
              obj1 = {},
              obj1["" + this.config.model.metadata.primaryKey] = this.config.model.prototype.attributes[this.config.model.metadata.primaryKey].attributes.schema.required(),
              obj1
            ),
            payload: this.config.model.getSchema()
          },
          plugins: {
            'hapi-swagger': {
              responses: {
                '200': {
                  'description': 'Updated',
                  'schema': Joi.object(this.config.model.getSchema()).label(this.config.model.metadata.model)
                },
                '400': {
                  'description': 'Bad request/validation error'
                },
                '401': {
                  'description': 'Unauthorized'
                },
                '404': {
                  'description': 'Not found'
                }
              }
            }
          },
          handler: (function(_this) {
            return function(request, reply) {
              return _this.config.model.objects().getById({
                pk: request.params.id
              }).then(function(instance) {
                if (instance != null) {
                  instance.set(request.payload);
                  return instance.save().then(function(result) {
                    var serializerClass, serializerInstance;
                    if (ifSerialize) {
                      serializerClass = serializer ? serializer : _this.config.serializer;
                      if (serializerClass == null) {
                        throw new Error("There is no serializer specified for " + _this.constructor.name);
                      }
                      serializerInstance = new serializerClass({
                        data: result
                      });
                      return serializerInstance.getData().then(function(serializerData) {
                        return reply(serializerData);
                      });
                    } else {
                      return reply(result);
                    }
                  })["catch"](function(error) {
                    return reply(Boom.badRequest(error));
                  });
                } else {
                  return reply(Boom.notFound(_this.config.errorMessages.notFound || (_this.config.model.metadata.model + " does not exist")));
                }
              });
            };
          })(this)
        }
      };
      if ((options != null) && _.isObject(options)) {
        this._extendRouteObject(routeObject, options);
      }
      return routeObject;
    };

    ModelView.prototype.partialUpdate = function(ifSerialize, serializer, options) {
      var routeObject;
      routeObject = this.update(ifSerialize, serializer, options);
      routeObject.method = 'PATCH';
      routeObject.config.description = "Partial update of " + this.config.model.metadata.model;
      routeObject.config.id = "partialUpdate" + this.config.model.metadata.model;
      routeObject.config.validate.payload = this.config.model.getSchema(void 0, true);
      return routeObject;
    };

    ModelView.prototype["delete"] = function(options) {
      var obj1, routeObject;
      if ((options != null) && !(_.isObject(options))) {
        throw new Error("'options' parameter of routing method should be an object");
      }
      if (options == null) {
        options = {
          config: {}
        };
      }
      routeObject = {
        method: 'DELETE',
        path: "/" + this.config.model.metadata.tableName + "/{" + this.config.model.metadata.primaryKey + "}",
        config: {
          description: "Delete " + this.config.model.metadata.model + " with specified id",
          tags: this.config.tags,
          id: "delete" + this.config.model.metadata.model,
          validate: {
            params: (
              obj1 = {},
              obj1["" + this.config.model.metadata.primaryKey] = this.config.model.prototype.attributes[this.config.model.metadata.primaryKey].attributes.schema.required(),
              obj1
            )
          },
          plugins: {
            'hapi-swagger': {
              responses: {
                '200': {
                  'description': 'Deleted'
                },
                '400': {
                  'description': 'Bad request'
                },
                '401': {
                  'description': 'Unauthorized'
                },
                '404': {
                  'description': 'Not found'
                }
              }
            }
          },
          handler: (function(_this) {
            return function(request, reply) {
              var whoDeleted;
              whoDeleted = request.auth.credentials != null ? request.auth.credentials.user.id : void 0;
              return _this.config.model.objects()["delete"](request.params.id, whoDeleted).then(function(result) {
                var publishObj;
                if (result === 1) {
                  publishObj = {
                    action: 'delete',
                    id: request.params.id
                  };
                  _this.server.publish("/" + _this.config.model.metadata.tableName, publishObj);
                  return reply(result);
                }
                return reply(Boom.notFound(_this.config.errorMessages.notFound || (_this.config.model.metadata.model + " does not exist!")));
              })["catch"](function(error) {
                return reply(Boom.badRequest(error));
              });
            };
          })(this)
        }
      };
      if ((options != null) && _.isObject(options)) {
        this._extendRouteObject(routeObject, options);
      }
      return routeObject;
    };

    return ModelView;

  })(BaseView);

  module.exports = ModelView;

}).call(this);
