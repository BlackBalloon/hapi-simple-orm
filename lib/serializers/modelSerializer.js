// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var BaseModel, FieldRelatedSerializer, ForeignKey, ManyToMany, ManyToOne, ModelSerializer, PrimaryKeyRelatedSerializer, Promise, Serializer, _, knex, knexConf, methods,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  Promise = require('bluebird');

  knexConf = require(process.cwd() + '/knexfile');

  knex = require('knex')(knexConf[process.env.NODE_ENV]);

  ForeignKey = require('./../fields/foreignKey');

  BaseModel = require('./../model/baseModel');

  ManyToMany = require('./../fields/manyToMany');

  ManyToOne = require('./../fields/manyToOne');

  PrimaryKeyRelatedSerializer = require('./primaryKeyRelatedSerializer');

  FieldRelatedSerializer = require('./fieldRelatedSerializer');

  Serializer = require('./serializer');

  methods = {
    'ForeignKey': '_getForeignKeyObject',
    'ManyToMany': '_getManyToManyObjects',
    'ManyToOne': '_getManyToOneObjects',
    'BaseField': '_getBaseFieldValue'
  };

  ModelSerializer = (function(superClass) {
    extend(ModelSerializer, superClass);

    ModelSerializer.acceptedParameters = ['data', 'many', 'readOnly', 'instance', 'fields', 'excludeFields'];

    function ModelSerializer(arg) {
      var ref;
      ref = arg != null ? arg : {}, this.data = ref.data, this.many = ref.many, this.instance = ref.instance;
      this.getData = bind(this.getData, this);
      this._getMultipleObjects = bind(this._getMultipleObjects, this);
      if ((this.data != null) && !this.many && !(this.data instanceof this.constructor.config.model)) {
        throw new Error("Data passed to the " + this.constructor.name + " must be an instance of " + this.constructor.config.model.metadata.model + "!");
      } else if ((this.data != null) && this.many) {
        if ((_.filter(this.data, (function(_this) {
          return function(val) {
            return val instanceof _this.constructor.config.model;
          };
        })(this))).length !== this.data.length) {
          throw new Error("Data passed to the " + this.constructor.name + " must be an instance of " + this.constructor.config.model.metadata.model + "!");
        }
      }
      if (this.many == null) {
        this.many = false;
      }
      ModelSerializer.__super__.constructor.call(this, arguments['0']);
      if (this.instance != null) {
        if (!(this.instance instanceof this.constructor.config.model)) {
          throw new TypeError("Instance passed to the " + this.constructor.name + " is not an instance of " + this.constructor.config.model.name);
        }
      }
    }

    ModelSerializer.prototype._getBaseFieldValue = function(obj, key) {
      return new Promise(function(resolve, reject) {
        return resolve(obj.get(key));
      });
    };

    ModelSerializer.prototype._getForeignKeyObject = function(obj, key, serializer) {
      var field, lookup, model, returning, val;
      if (!(serializer instanceof Serializer) || obj[key] === null) {
        return new Promise(function(resolve, reject) {
          return resolve(obj[key]);
        });
      }
      model = obj.attributes[key].attributes.referenceModel;
      field = obj.attributes[key].attributes.referenceField;
      val = obj[key];
      lookup = {};
      lookup[field] = val;
      returning = [];
      if (serializer instanceof FieldRelatedSerializer) {
        if (model.prototype.attributes[serializer.field] == null) {
          throw new TypeError(serializer.field + " is not an attribute of " + model.metadata.model + "!");
        }
        returning = [(model.prototype.attributes[serializer.field].getDbField(serializer.field)) + " AS " + serializer.field];
      } else if (serializer instanceof PrimaryKeyRelatedSerializer) {
        returning = ["" + model.metadata.primaryKey];
      } else {
        _.each(serializer.serializerFieldsKeys, function(relatedKey) {
          if (relatedKey in model.prototype.attributes && (model.prototype.attributes[relatedKey].attributes.abstract == null)) {
            return returning.push((model.prototype.attributes[relatedKey].getDbField(relatedKey)) + " AS " + relatedKey);
          }
        });
      }
      return model.objects().get({
        lookup: lookup,
        returning: returning,
        toObject: true
      }).then(function(getResult) {
        serializer.setData(getResult);
        return serializer.getData().then(function(values) {
          return values;
        });
      })["catch"](function(error) {
        if (model.metadata.errorLogger != null) {
          model.metadata.errorLogger.error(error);
        }
        throw error;
      });
    };

    ModelSerializer.prototype._getManyToManyObjects = function(obj, key, serializer) {
      var model, returning, through, throughFields, val;
      model = require(obj.attributes[key].attributes.toModel);
      through = obj.attributes[key].attributes.through;
      throughFields = obj.attributes[key].attributes.throughFields;
      val = obj[obj.constructor.metadata.primaryKey];
      if (serializer == null) {
        serializer = new PrimaryKeyRelatedSerializer({
          many: true
        });
      }
      returning = [];
      if (serializer instanceof PrimaryKeyRelatedSerializer) {
        returning = [model.metadata.tableName + "." + model.metadata.primaryKey];
      } else if (serializer instanceof FieldRelatedSerializer) {
        if (model.prototype.attributes[serializer.field] == null) {
          throw new TypeError(serializer.field + " is not an attribute of " + model.metadata.model + "!");
        }
        returning = [model.metadata.tableName + "." + (model.prototype.attributes[serializer.field].getDbField(serializer.field)) + " AS " + serializer.field];
      } else {
        _.each(serializer.serializerFieldsKeys, function(serFieldKey) {
          if (serFieldKey in model.prototype.attributes && (model.prototype.attributes[serFieldKey].attributes.abstract == null)) {
            return returning.push(model.metadata.tableName + "." + (model.prototype.attributes[serFieldKey].getDbField(serFieldKey)) + " AS " + serFieldKey);
          }
        });
      }
      return knex(model.metadata.tableName).select(returning).leftJoin(through, through + "." + throughFields[1], model.metadata.tableName + ".id").where(through + "." + throughFields[0], val).andWhere(model.metadata.tableName + ".is_deleted", false).then(function(m2mresult) {
        var m2mInstances;
        m2mInstances = _.map(m2mresult, function(val, key) {
          return new model(val);
        });
        serializer.setData(m2mInstances);
        return serializer.getData().then(function(values) {
          return values;
        });
      })["catch"](function(error) {
        if (model.metadata.errorLogger != null) {
          model.metadata.errorLogger.error(error);
        }
        throw error;
      });
    };

    ModelSerializer.prototype._getManyToOneObjects = function(obj, key, serializer) {
      var field, model, returning, val;
      model = require(obj.attributes[key].attributes.toModel);
      field = obj.attributes[key].attributes.referenceField;
      val = obj[obj.constructor.metadata.primaryKey];
      if (serializer == null) {
        serializer = new PrimaryKeyRelatedSerializer({
          many: true
        });
      }
      returning = [];
      if (serializer instanceof PrimaryKeyRelatedSerializer) {
        returning = ["" + model.metadata.primaryKey];
      } else if (serializer instanceof FieldRelatedSerializer) {
        if (model.prototype.attributes[serializer.field] == null) {
          throw new TypeError(serializer.field + " is not an attribute of " + model.metadata.model + "!");
        }
        returning = [(model.prototype.attributes[serializer.field].getDbField(serializer.field)) + " AS " + serializer.field];
      } else {
        _.each(serializer.serializerFieldsKeys, function(serFieldKey) {
          if (serFieldKey in model.prototype.attributes && (model.prototype.attributes[serFieldKey].attributes.abstract == null)) {
            return returning.push((model.prototype.attributes[serFieldKey].getDbField(serFieldKey)) + " AS " + serFieldKey);
          }
        });
      }
      return knex(model.metadata.tableName).select(returning).where(field, val).andWhere('is_deleted', false).then(function(m2mresult) {
        var m2mInstances;
        m2mInstances = _.map(m2mresult, function(val, key) {
          return new model(val);
        });
        serializer.setData(m2mInstances);
        return serializer.getData().then(function(values) {
          return values;
        });
      })["catch"](function(error) {
        if (model.metadata.errorLogger != null) {
          model.metadata.errorLogger.error(error);
        }
        throw error;
      });
    };

    ModelSerializer.prototype._getSingleObject = function(obj) {
      var objectPromises;
      if (obj == null) {
        obj = this.data;
      }
      objectPromises = [];
      _.each(this.serializerFields, (function(_this) {
        return function(val, key) {
          var methodName;
          if (val.constructor.name === 'String') {
            key = val;
          } else {
            key = (_.keys(val))[0];
          }
          if (!(indexOf.call(_this.constructor.config.excludeFields, key) >= 0) && key in obj.attributes) {
            methodName = methods[obj.attributes[key].constructor.name];
            return objectPromises.push(ModelSerializer.prototype[methodName](obj, key, val[key]).then(function(result) {
              return result;
            }));
          }
        };
      })(this));
      return Promise.all(objectPromises).then((function(_this) {
        return function(objectValues) {
          _this.serializerFieldsKeys = _.without(_this.serializerFieldsKeys, void 0);
          if (_this.serializerFieldsKeys.length !== objectValues.length) {
            throw new Error("Encountered error while retrieving data from serializer!");
          }
          return _.object(_this.serializerFieldsKeys, objectValues);
        };
      })(this));
    };

    ModelSerializer.prototype._getMultipleObjects = function(objects) {
      var allObjectsPromises, result;
      result = [];
      allObjectsPromises = [];
      if (objects == null) {
        objects = this.data;
      }
      _.each(this.data, (function(_this) {
        return function(val, key) {
          return allObjectsPromises.push(_this._getSingleObject(val));
        };
      })(this));
      return Promise.all(allObjectsPromises).then(function(values) {
        return values;
      });
    };

    ModelSerializer.prototype.validate = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _.each(_this.data, function(val, key) {
            if (!(indexOf.call(_this.serializerFieldsKeys, key) >= 0)) {
              return reject(new TypeError(("Parameter '" + key + "' is not an attribute of ") + (_this.constructor.config.model.metadata.model + " or is set as readOnly!")));
            }
          });
          if (_this.constructor.config.model.metadata.primaryKey in _this.data && !_this.instance) {
            reject(new TypeError("Primary key was passed without an instance of the model!"));
          }
          return resolve(true);
        };
      })(this));
    };

    ModelSerializer.prototype.create = function() {
      return this.constructor.config.model.objects().create({
        payload: this.data,
        direct: true,
        toObject: true
      }).then(function(result) {
        return result;
      })["catch"]((function(_this) {
        return function(error) {
          if (_this.constructor.config.model.metadata.errorLogger != null) {
            _this.constructor.config.model.metadata.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    ModelSerializer.prototype.update = function() {
      if (this.instance == null) {
        throw new Error("There is no instance of " + this.constructor.config.model.metadata.model + "!");
      }
      this.instance.set(this.data);
      return this.instance.save({
        toObject: true
      }).then(function(result) {
        return result;
      })["catch"]((function(_this) {
        return function(error) {
          if (_this.constructor.config.model.metadata.errorLogger != null) {
            _this.constructor.config.model.metadata.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    ModelSerializer.prototype.save = function() {
      return this.validate().then((function(_this) {
        return function() {
          if (_this.instance == null) {
            return _this.create().then(function(result) {
              _this.data = result;
              return result;
            });
          } else {
            return _this.update().then(function(result) {
              _this.data = result;
              return result;
            });
          }
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          if (_this.constructor.config.model.metadata.errorLogger != null) {
            _this.constructor.config.model.metadata.errorLogger.error(error);
          }
          throw error;
        };
      })(this));
    };

    ModelSerializer.prototype.getData = function() {
      if (this.data == null) {
        throw new Error("You must first specify the data for " + this.constructor.name + " to retrieve values!");
      }
      if (this.many) {
        return this._getMultipleObjects().then(function(values) {
          return values;
        });
      } else {
        return this._getSingleObject().then(function(values) {
          return values;
        });
      }
    };

    ModelSerializer.prototype.toString = function() {
      return "Instance of " + constructor.config.model.metadata.model + ".";
    };

    return ModelSerializer;

  })(Serializer);

  module.exports = ModelSerializer;

}).call(this);
