// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var FieldRelatedSerializer, Promise, Serializer, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  Promise = require('bluebird');

  Serializer = require('./serializer');

  FieldRelatedSerializer = (function(superClass) {
    extend(FieldRelatedSerializer, superClass);

    FieldRelatedSerializer.acceptedParameters = ['many', 'field', 'readOnly', 'model'];

    FieldRelatedSerializer.rejectedFieldTypes = {
      'ForeignKey': 'foreign key',
      'ManyToMany': 'm2m relation',
      'ManyToOne': 'm2o relation'
    };

    function FieldRelatedSerializer(arg) {
      var fieldClassName, ref;
      ref = arg != null ? arg : {}, this.many = ref.many, this.field = ref.field, this.readOnly = ref.readOnly, this.model = ref.model;
      if ((this.field == null) || (this.model == null)) {
        throw new Error(this.constructor.name + " requires the 'field' and 'model' attributes!");
      }
      if (!this.field in this.model.prototype.attributes) {
        throw new TypeError("Related object does not have attribute " + this.field);
      }
      fieldClassName = this.model.prototype.attributes[this.field].constructor.name;
      if (fieldClassName in this.constructor.rejectedFieldTypes) {
        throw new TypeError("Field from " + this.constructor.name + " can't be a " + this.constructor.rejectedFieldTypes[fieldClassName]);
      }
      _.each(arguments[0], (function(_this) {
        return function(val, key) {
          if (!(indexOf.call(_this.constructor.acceptedParameters, key) >= 0)) {
            throw new TypeError("Parameter '" + key + " is not accepted in " + _this.constructor.name + "'");
          }
        };
      })(this));
    }

    FieldRelatedSerializer.prototype.getData = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (_this.many) {
            return resolve(_.map(_this.data, function(val) {
              return val.get(_this.field);
            }));
          } else {
            if (!_this.field in _this.data.attributes) {
              reject(new TypeError("Related object does not have attribute " + _this.field));
            }
            return resolve(_this.data.get(_this.field));
          }
        };
      })(this));
    };

    return FieldRelatedSerializer;

  })(Serializer);

  module.exports = FieldRelatedSerializer;

}).call(this);
